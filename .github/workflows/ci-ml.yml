name: ML Project CI Pipeline
on: [push, pull_request]  # 代码推送/PR时触发

jobs:
  # 1. 代码检查（对应文档）
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run flake8 (linting)
        run: flake8 app/ tests/ --count --exit-zero

  # 2. 代码格式化检查（对应文档）
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install black
        run: pip install black
      - name: Check code format
        run: black app/ tests/ --check

  # 3. ML功能测试（对应文档）
  test-ml:
    runs-on: ubuntu-latest
    needs: [lint, format]  # 依赖lint和format通过后执行
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run ML tests (data+model+prediction)
        run: pytest tests/test_ml.py -v
      - name: Verify MLflow experiment (本地记录)
        run: |
          python app/model.py  # 运行训练脚本，生成mlruns/
          ls mlruns/ | grep -q "0"  # 检查是否生成实验目录（默认实验ID以0开头）

  # 4. Docker构建（对应文档）
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-ml]  # 依赖测试通过后执行
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: docker build -t ml-iris-project .
      - name: Verify Docker image (run model training)
        run: |
          # 挂载.env（用GitHub Secrets存储敏感信息，避免硬编码）
          echo "MLFLOW_TRACKING_URI=http://localhost:5000" > .env
          docker run --rm ml-iris-project python app/model.py  # 运行容器内训练脚本